class Node:
    def __init__(self):
        self.val = 0
        self.children = {}      
        
class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = Node()

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        cur = self.root
        for i in word:
            node = cur.children.get(i)
            if not node:
                node = Node()
                cur.children[i] = node
            cur = node
        cur.val = 1

    def dfs(self, root, word):
        if not word:
            return root.val
        elif word[0] == '.':
            for node in root.children:
                if self.dfs(root.children.get(node), word[1:]):
                    return True
        elif word[0] in root.children:
            if self.dfs(root.children.get(word[0]), word[1:]):
                return True
        
        return False
        
        
    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        return self.dfs(self.root, word)
        
                


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
